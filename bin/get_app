#!/usr/bin/env ruby

require "optparse"
require "base64"
require "jwt"
require "httparty"
require "json"
require "jsonpath"
require "date"
require "open-uri"
require "zip"

options = {}

puts <<~MESSAGE
  Get app from app store connect
  Author: github.com/dikako\n
MESSAGE

parser = OptionParser.new do |parser|
  parser.on("-f", "--file-p8=", "File auth key p8 app store connect")
  parser.on("-i", "--issuer-id=", "issuer_id app store connect")
  parser.on("-k", "--key-id=", "key_id app store connect")
  parser.on("-p", "--product=", "product name")
  parser.on("-w", "--workflow=", "workflow on app store connect")
  parser.on("-d", "--dir=", "Download folder")
  parser.on("-a", "--art=", "Artifact filter by file name")
end

parser.parse!(into: options)

file_p8 = "file-p8".to_sym
issuer_id = "issuer-id".to_sym
key_id = "key-id".to_sym
product_name = "product".to_sym
build_workflow_name = "workflow".to_sym
download_path = "dir".to_sym
artifact_filter = "art".to_sym

required_keys = {
  file_p8 => "File auth key p8 is required!",
  issuer_id => "issuer-id is required! ex: 69a61111-e111-4113-e153-5b8c7c00a4d1",
  key_id => "key-id is required! ex: 0YW000XMBW",
  product_name => "product name is required! ex: myapp",
  build_workflow_name => "workflow is required! ex: Production Build Workflow",
}

required_keys.each do |key, message|
  raise "ERROR: #{message}" if options[key].nil?
end

# Private Key
private_key = OpenSSL::PKey.read(File.read(options[file_p8]))

# Encode credentials apps store connect
encode_credentials = JWT.encode(
  {
    iss: options[issuer_id],
    exp: Time.now.to_i + 20 * 60,
    aud: "appstoreconnect-v1"
  },
  private_key,
  "ES256",
  header_fields = {
    kid: options[key_id]
  }
)

# Define authorization app store connect
bearer_token = {
  Authorization: "Bearer #{encode_credentials}"
}

get_products = HTTParty.get(
  "https://api.appstoreconnect.apple.com/v1/ciProducts",
  headers: bearer_token
)

unless get_products.code == 200
  raise get_products.body
end

list_product = JsonPath.new("$.data[?(@.attributes.productType == 'APP')].attributes.name").on(get_products)
input_product = options[product_name]

puts <<~INFO
  Success get list product!
  Product found: #{list_product.join(", ")}

  ** You choose '#{input_product}' product. **
INFO

workflow_link = JsonPath.new("$.data[?(@.attributes.name == '#{input_product}')].relationships.workflows.links.related").on(get_products).first

get_workflows = HTTParty.get(
  "#{workflow_link}",
  headers: bearer_token
)

unless get_workflows.code == 200
  raise get_workflows.body
end

list_workflow = JsonPath.new("$.data[?(@.attributes.isEnabled == true)].attributes.name").on(get_workflows)
input_workflow_name = options[build_workflow_name]

puts <<~INFO
  Success get list workflow!
  List active workflow: #{list_workflow.join(", ")}

  ** You choose '#{input_workflow_name}' workflow. **
INFO

build_run_link = JsonPath.new("$.data[?(@.attributes.name == '#{input_workflow_name}')].relationships.buildRuns.links.related").on(get_workflows).first

get_build_runs = HTTParty.get(
  "#{build_run_link}?fields[ciProducts]&limit=200",
  headers: bearer_token
)

unless get_build_runs.code == 200
  raise get_build_runs.body
end

# Get last build date
build_run_finished_dates = JsonPath.new("$.data[?(@.attributes.completionStatus == 'SUCCEEDED')].attributes.finishedDate").on(get_build_runs)
last_build_run_date = build_run_finished_dates.max
last_build_run_url = JsonPath.new("$.data[?(@.attributes.finishedDate == '#{last_build_run_date}')].relationships.actions.links.related").on(get_build_runs).first

puts <<~INFO
  Success get list build run!
  Found '#{build_run_finished_dates.length}' build run.

  ** Get latest build date '#{Time.parse(last_build_run_date.to_s).strftime("%A, %B %d, %Y %I:%M%p")}'. **
INFO

get_builds = HTTParty.get(
  last_build_run_url,
  headers: bearer_token
)

unless get_builds.code == 200
  raise get_builds.body
end

build_finished_dates = JsonPath.new("$.data[?(@.attributes.completionStatus == 'SUCCEEDED')].attributes.finishedDate").on(get_build_runs)

# Get last build date
last_build_date = build_finished_dates.max
last_build_url = JsonPath.new("$.data[?(@..attributes.finishedDate == '#{last_build_date}')].relationships.artifacts.links.related").on(get_builds).first

puts <<~INFO
  Success get list build link!
  Found '#{build_finished_dates.length}' build.

  ** Get latest link build date '#{Time.parse(last_build_date.to_s).strftime("%A, %B %d, %Y %I:%M%p")}'. **
  ** Get latest link build '#{last_build_url}'. **
INFO

artifacts = HTTParty.get(
  last_build_url,
  headers: bearer_token
)

unless artifacts.code == 200
  raise artifacts.body
end

input_artifact_filter = options[artifact_filter]
artifact_file = JsonPath.new("$.data[*].attributes.fileName").on(artifacts)
artifact_url = JsonPath.new("$.data[?(@.attributes.fileName =~ /#{input_artifact_filter}/)].links.self").on(artifacts).first

puts <<~INFO
  Success get list artifact!
  Found list artifact file: #{artifact_file.join(", ")}

  ** You choose '#{input_artifact_filter}' artifact. **
  ** Artifact link '#{artifact_url}'. **
INFO

detail_artifact = HTTParty.get(
  artifact_url,
  headers: bearer_token
)

unless detail_artifact.code == 200
  raise detail_artifact.body
end

artifact_filename = JsonPath.new("data.attributes.fileName").on(detail_artifact).first
download_url = JsonPath.new("data.attributes.downloadUrl").on(detail_artifact).first

puts <<~INFO
  Success get download artifact link!

  ** Artifact file name '#{artifact_filename}'. **
  ** Download link '#{download_url}'. **
INFO

# Check when --dir is null save download to root project
if options[download_path].nil?
  app_folder = Dir.pwd
  file_name = "app.zip"
else
  app_folder = options[download_path].match(/(.+\/)/)[1]
  file_name = options[download_path].match(/[^\/]+$/)[0]
  FileUtils.mkdir_p(app_folder)
end

# Download artifact
app_path = "#{app_folder}#{file_name}"

puts "Downloading app..."
File.open(app_path, "wb") do |file|
  HTTParty.get(download_url, stream_body: true) do |fragment|
    file.write(fragment)
  end
end

# Unzip app file
puts "Unzip file..."
Zip::File.open(app_path) do |zip_file|
  zip_file.each do |entry|
    entry.extract(File.join(app_folder, entry.name))
  end
end

# Store app version to file
puts "Get App version..."
file = File.new("version.txt", "w")
app_version = artifact_filename&.match(/\d+\.\d+\.\d+/)&.[](0)

if app_version.nil?
  project_dir = Dir.pwd
  simulator_app = Dir[File.join(project_dir, '**', '*.app')]
  simulator_app = simulator_app.join(' ') unless simulator_app.empty?

  info_plist_path = "#{simulator_app}/Info.plist"
  app_version = `/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "#{info_plist_path}"`.strip
end

puts "App version: #{app_version}"

file.write(app_version)
file.close
